import torch
import numpy as np
import matplotlib.pyplot as plt
import matplotlib
import matplotlib.animation as ani
import torch.nn as nn
import torch.optim as optim

#设置matplotlib为中文显示
plt.rcParams['font.sans-serif'] = ['SimSun']
#plt.rcParams['font.sans-serif'] = ['Times New Roman']
# 生成数据
x = torch.unsqueeze(torch.linspace(-2, 2, 100), 1)
randm = torch.rand(100,1)*2
y = (6 + randm)  * torch.sin(4*x + 2)
print(x)
print(y)
class Net(nn.Module):
    def __init__(self):
        super().__init__()
        self.A = nn.Parameter(torch.tensor(2.,requires_grad = True))
        self.k = nn.Parameter(torch.tensor(3.,requires_grad = True))
        self.phi = nn.Parameter(torch.tensor(0.,requires_grad = True))
    
    def forward(self,x):
        return self.A * torch.sin(self.k*x + self.phi)

model = Net()
Loss = nn.MSELoss()
optimizer = optim.SGD(model.parameters(), lr=0.01)

# 绘制原始数据
fig = plt.subplot(2,2,1)
plt.scatter(x.numpy(), y.numpy(), label='Data', color='blue')
plt.ylabel("y",fontsize = 20)
plt.xticks([])
plt.yticks(fontsize = 20)
plt.title("Data Points",fontsize = 25)

# 绘制训练70次后的结果
fig = plt.subplot(2,2,2)
epochs = 70
for i in range(epochs):
    output = model.forward(x)
    loss = Loss(output,y)
    optimizer.zero_grad()
    loss.backward()
    optimizer.step()
    print(f'Epoch {i+1}/{epochs}, Loss: {loss.item():4f}')
plt.scatter(x.numpy(), y.numpy(), label='Data', color='blue')
plt.plot(x.numpy(), model(x).detach().numpy(), label='Fitted Curve', color='red',linewidth = 3)
plt.xticks([])
plt.yticks([])
plt.title('训练批次:70',fontsize = 25)

# 绘制训练140次后的结果
fig = plt.subplot(2,2,3)
for i in range(epochs):
    output = model.forward(x)
    loss = Loss(output,y)
    optimizer.zero_grad()
    loss.backward()
    optimizer.step()
    print(f'Epoch {i+1}/{epochs}, Loss: {loss.item():4f}')
plt.scatter(x.numpy(), y.numpy(), label='Data', color='blue')
plt.plot(x.numpy(), model(x).detach().numpy(), label='Fitted Curve', color='red',linewidth = 3)
plt.ylabel("y",fontsize = 20)
plt.xlabel("x",fontsize = 20)
plt.xticks(fontsize = 20)
plt.yticks(fontsize = 20)
plt.title('训练批次:140',fontsize = 25)

# 绘制训练210次后的结果
fig = plt.subplot(2,2,4)
for i in range(epochs):
    output = model.forward(x)
    loss = Loss(output,y)
    optimizer.zero_grad()
    loss.backward()
    optimizer.step()
    print(f'Epoch {i+1}/{epochs}, Loss: {loss.item():4f}')
plt.scatter(x.numpy(), y.numpy(), label='Data', color='blue')
plt.plot(x.numpy(), model(x).detach().numpy(), label='Fitted Curve', color='red',linewidth = 3)
plt.xticks(fontsize = 20)
plt.xlabel("x",fontsize = 20)
plt.title('训练批次:210',fontsize = 25)

plt.show()
