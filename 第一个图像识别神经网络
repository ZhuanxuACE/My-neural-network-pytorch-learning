import time
import torch
from torch import nn
from torch.utils.data import DataLoader
from torchvision import datasets
from torchvision.transforms import ToTensor
import matplotlib.pyplot as plt

print(torch.cuda.is_available())
device = "cuda"#cuda加速计算
traning_data = datasets.FashionMNIST(root = 'D:\hello\神经网络搭建\数据集',#下载或载入地址
                                     train = True, #是否作为训练集
                                     download = True, #若无数据是否下载
                                     transform = ToTensor())  
test_data = datasets.FashionMNIST(root = 'D:\hello\神经网络搭建\数据集',
                                     train = False,
                                     download = True,
                                     transform = ToTensor())

batch_size = 64 #训练批次

train_dataloader = DataLoader(traning_data,batch_size = 64)
test_dataloader = DataLoader(test_data,batch_size = batch_size)

for X, y in test_dataloader:
    print(f"Shape of X [N, C, H, W]: {X.shape}")
    print(f"Shape of y: {y.shape} {y.dtype}")
    break

class NeuralNetwork(nn.Module):
    def __init__(self):
        super().__init__() #继承父类的析构函数
        self.flatten = nn.Flatten()
        self.linear_relu_stack = nn.Sequential(
            nn.Linear(28*28,512),
            nn.ReLU(),
            nn.Linear(512, 10)
            )
    
    def forward(self,x):
        x = self.flatten(x)
        logits = self.linear_relu_stack(x)
        return logits

model = NeuralNetwork().to(device)

print(model)

loss_fn = nn.CrossEntropyLoss()
optimizer = torch.optim.SGD(model.parameters(),lr = 0.001)

def train(dataloader,model,loss_fn,optimizer):
    size = len(dataloader.dataset)
    model.train()
    for batch,(X,y) in enumerate(dataloader):
        X = X.to(device)
        y = y.to(device)
        
        pred = model(X)
        loss = loss_fn(pred,y)
        
        loss.backward()
        optimizer.step()
        optimizer.zero_grad()
        
        if batch%100 == 0:
            loss = loss.item()
            current = (batch + 1) * len(X)
            print(f"loss:{loss:>7f} [{current:>5d}/{size:>5d}]")
            
def test(dataloader, model, loss_fn):
    size = len(dataloader.dataset)
    num_batches = len(dataloader)
    model.eval()
    test_loss = 0
    correct = 0
    with torch.no_grad():
        for X,y in dataloader:
            X = X.to(device)
            y = y.to(device)
            pred = model(X)
            test_loss += loss_fn(pred,y).item()
            correct += (pred.argmax(1) == y).type(torch.float).sum().item()
            
    test_loss /= num_batches
    correct /= size
    print(f"Test Error: \n Accuracy: {(100*correct):>0.1f}%,Avg loss:{test_loss:>8f}\n")
    
epochs = 5
for t in range(epochs):
    a = time.time()
    print(f"Epoch {t+1}\n--------------------------")
    train(train_dataloader,model,loss_fn,optimizer)
    test(test_dataloader,model,loss_fn)
    print(time.time() - a)
print("Done!!!!")

torch.save(model.state_dict(),"D:\hello\神经网络搭建\数据集\model.pth")
print("已保存神经网络模型")

model = NeuralNetwork().to(device)#载入已训练好的神经网络模型
model.load_state_dict(torch.load("D:\hello\神经网络搭建\数据集\model.pth",weights_only=True))

classes = [
    "T-shirt/top",
    "Trouser",
    "Pullover",
    "Dress",
    "Coat",
    "Sandal",
    "Shirt",
    "Sneaker",
    "Bag",
    "Ankle boot",
]

model.eval()
print(test_data[0][0])

plt.imshow(test_data[0][0][0])
plt.show()
x = test_data[0][0]
y = test_data[0][1]
with torch.no_grad():
    x = x.to(device)
    pred = model(x)
    predicted = classes[pred[0].argmax(0)]
    actual = classes[y]
    print(f"Predicted:{predicted},Actual:{actual}")
